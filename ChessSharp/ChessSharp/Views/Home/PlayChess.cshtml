@using ChessSharp.ChessItems
@Model ChessSharp.Models.GameModel

@{
    ViewBag.Title = "Play Chess!";

    bool lightTurn = Model.moveCount % 2 == 0;
    var seeker = new SharpCentral.Seeker();

    int bP = 0;
    ChessPiece occupant;
    SharpCentral.Piece sqType;
    bool addJs;
}


    <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.0/themes/base/jquery-ui.css" />
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js" type="text/javascript"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.23/jquery-ui.min.js" type="text/javascript"></script>

<h2>Play Chess!</h2>

@using (Html.BeginForm("PlayGame", "Home", new { GameModel = Model }, FormMethod.Post))
{

<div style="display:inline-block; float: left;">
<table class="ChessBoard " >
<tr>
    <td><input id="cmdRevertMove" type="button" value="Revert" onclick="revertMove(); return false; "/></td>
    <td><input id="cmdCommitMove" type="submit" value="Commit" onclick="commitMove();"/>
        @Html.Hidden("currentPosition")
        @Html.Hidden("newPosition")
        @if (ViewBag.MoveFailed != null)
        {
            <p style="background-color: silver;">@ViewBag.MoveFailed</p>
        }
    </td>
    <td colspan="6">
    <span style="float:right;">
    <input id="cmdChooseGame" type="button" value="ChooseGame" onclick="return false;"/>
        <select id="cboGameSelect" runat="server">
            <option value="0">New Game</option>
        </select>
    </span>
</td>
</tr>
    @for (int r = 0; r < 8; r++)
    {
        <tr>
        @for (int c = 0; c < 8; c++)
        {

            occupant = Model.board.chessBoard[bP].getOccupant();

              sqType = occupant != null ? occupant.PieceType : SharpCentral.Piece.Empty;
              addJs = lightTurn ? sqType > SharpCentral.Piece.Empty : sqType < SharpCentral.Piece.Empty;
                           
            
            <td id="@("sq" + bP)" class="@(addJs ? "rtm " : "")square" onclick="movePiece(this.id); " >
            
            @if (sqType != SharpCentral.Piece.Empty)
            {
                if (sqType > SharpCentral.Piece.Empty)
                {
                    <span class="team" style="display:none;">light</span>
                }
                else if (sqType < SharpCentral.Piece.Empty)
                {
                    <span class="team" style="display:none;">dark</span>
                }
                    <img src="@(Url.Content(seeker.GetImagePath(occupant.PieceType)))" style="width: 100%; height: 100%;" alt="@(seeker.GetName(occupant.PieceType))" />
            }
                </td>
            
            bP++;
        }
        </tr>
    }
</table>
</div>

<div style="display:inline-block; float:left; background-color: gray;">
    <span id="spnMoveHIstory">a1-b2 c3-d4 e5-f6</span>
    <hr />
    <ul class="chatBox">

    </ul>
    <hr />

    <input id="txtChatEnter" type="text"/> <!-- Make sure to cleanse this of tags -->
</div>

}

<script type="text/javascript" >
    var lastMoveHtml = lastMoveHtml || null;
    var previousSquareId = previousSquareId || null;
    var pawn = $('#pawn');
    var square = $(".square");

    pawn.click(function () {
        //alert("GAH, they pressed the dino!");
    })

    for (var i = 0; i < square.length; i++) {
        if (Math.floor(i / 8) % 2 === 0) {
            if (i % 2 === 0) {
                $(square[i]).addClass('b');
            } else {
                $(square[i]).addClass('w');
            }
        } else {
            if (i % 2 === 0) {
                $(square[i]).addClass('w');
            } else {
                $(square[i]).addClass('b');
            }
        }
    }

    square.onclick = "movePiece(this.id);";

    var movePiece = function (squareID) {

        var prevChose = $(".readyToMove");
        var movedTo = $("#" + squareID);
        var usedUp = $(".movedTo"); //Not allowed to make more than one move per turn

        //TODO: Call web service to validate move
        //OR: Have a preloaded list of valid moves for each piece... That seems silly... but should we validate twice?

        if ((usedUp.length === 0)) {
            if (prevChose.length > 0) {
                if (prevChose[0].id === squareID) {
                    prevChose.removeClass("readyToMove");
                    //TODO: clear the list of moves for the piece (when it exists)
                } else if (prevChose.find(".team").html() === movedTo.find(".team").html()) {
                    //You can't take your own team you silly
                    alert("No, you're dumb");
                } else {
                    //TODO: validate against the list of moves for the piece
                    prevChose.removeClass("readyToMove");
                    prevChose.addClass("movedFrom");

                    lastMoveHtml = movedTo.html();

                    movedTo.html(prevChose.html());
                    movedTo.addClass("movedTo");

                    prevChose.html('');

                    $("#currentPosition").val(previousSquareId);
                    $("#newPosition").val(squareID);
                }
            } else {
                var sqToMove = $("#" + squareID);

                if (sqToMove.hasClass("rtm")) {
                    //Only do this if the class stating it is ready to move exists
                    $("#" + squareID).addClass("readyToMove");
                    previousSquareId = squareID;
                    //At this point, load the list of valid moves for the piece
                    //Async highlight available moves
                }
            }
        }

    };

    var revertMove = function () {

        var movedFrom = $(".movedFrom");
        var movedTo = $(".movedTo");

        if (movedFrom.length > 0) {
            movedFrom.removeClass("movedFrom");
            movedFrom.addClass("readyToMove");
            movedTo.removeClass("movedTo");

            movedFrom.html(movedTo.html().trim());

            movedTo.html(lastMoveHtml.trim());

            lastMoveHtml = null;
        }
        return false;
    };

    var commitMove = function () {

        var movedFrom = $(".movedFrom");
        var movedTo = $(".movedTo");

        if (movedFrom.length > 0 && movedTo.length > 0) {
            movedFrom.removeClass("movedFrom");
            movedTo.removeClass("movedTo");

            lastMoveHtml = null;

            //TODO: Call web service to validate move
            //if validated, commit move 
        }
        return false;
    };

</script>

