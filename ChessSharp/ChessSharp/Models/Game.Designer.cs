//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("ChessSharpModel", "FK_Game_CompleteTypeIdent", "CompleteType", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ChessSharp.Models.CompleteType), "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ChessSharp.Models.Game), true)]
[assembly: EdmRelationshipAttribute("ChessSharpModel", "FK_Game_Add_PlayerIdent", "Player", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ChessSharp.Models.Player), "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ChessSharp.Models.Game), true)]
[assembly: EdmRelationshipAttribute("ChessSharpModel", "FK_Game_Dark_PlayerIdent", "Player", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ChessSharp.Models.Player), "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ChessSharp.Models.Game), true)]
[assembly: EdmRelationshipAttribute("ChessSharpModel", "FK_Game_Ident", "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ChessSharp.Models.Game), "GameSquare", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ChessSharp.Models.GamePiece), true)]
[assembly: EdmRelationshipAttribute("ChessSharpModel", "FK_Game_Light_PlayerIdent", "Player", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ChessSharp.Models.Player), "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ChessSharp.Models.Game), true)]
[assembly: EdmRelationshipAttribute("ChessSharpModel", "FK_Player_Player", "Player", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ChessSharp.Models.Player), "Player1", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ChessSharp.Models.Player), true)]

#endregion

namespace ChessSharp.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ChessSharpEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ChessSharpEntities object using the connection string found in the 'ChessSharpEntities' section of the application configuration file.
        /// </summary>
        public ChessSharpEntities() : base("name=ChessSharpEntities", "ChessSharpEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ChessSharpEntities object.
        /// </summary>
        public ChessSharpEntities(string connectionString) : base(connectionString, "ChessSharpEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ChessSharpEntities object.
        /// </summary>
        public ChessSharpEntities(EntityConnection connection) : base(connection, "ChessSharpEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CompleteType> CompleteTypes
        {
            get
            {
                if ((_CompleteTypes == null))
                {
                    _CompleteTypes = base.CreateObjectSet<CompleteType>("CompleteTypes");
                }
                return _CompleteTypes;
            }
        }
        private ObjectSet<CompleteType> _CompleteTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Game> Games
        {
            get
            {
                if ((_Games == null))
                {
                    _Games = base.CreateObjectSet<Game>("Games");
                }
                return _Games;
            }
        }
        private ObjectSet<Game> _Games;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GamePiece> GamePieces
        {
            get
            {
                if ((_GamePieces == null))
                {
                    _GamePieces = base.CreateObjectSet<GamePiece>("GamePieces");
                }
                return _GamePieces;
            }
        }
        private ObjectSet<GamePiece> _GamePieces;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Player> Players
        {
            get
            {
                if ((_Players == null))
                {
                    _Players = base.CreateObjectSet<Player>("Players");
                }
                return _Players;
            }
        }
        private ObjectSet<Player> _Players;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CompleteTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompleteTypes(CompleteType completeType)
        {
            base.AddObject("CompleteTypes", completeType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Games EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGames(Game game)
        {
            base.AddObject("Games", game);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GamePieces EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGamePieces(GamePiece gamePiece)
        {
            base.AddObject("GamePieces", gamePiece);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Players EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlayers(Player player)
        {
            base.AddObject("Players", player);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ChessSharpModel", Name="CompleteType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CompleteType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CompleteType object.
        /// </summary>
        /// <param name="ident">Initial value of the Ident property.</param>
        public static CompleteType CreateCompleteType(global::System.Int32 ident)
        {
            CompleteType completeType = new CompleteType();
            completeType.Ident = ident;
            return completeType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Ident
        {
            get
            {
                return _Ident;
            }
            set
            {
                if (_Ident != value)
                {
                    OnIdentChanging(value);
                    ReportPropertyChanging("Ident");
                    _Ident = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Ident");
                    OnIdentChanged();
                }
            }
        }
        private global::System.Int32 _Ident;
        partial void OnIdentChanging(global::System.Int32 value);
        partial void OnIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CompleteTypeName
        {
            get
            {
                return _CompleteTypeName;
            }
            set
            {
                OnCompleteTypeNameChanging(value);
                ReportPropertyChanging("CompleteTypeName");
                _CompleteTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CompleteTypeName");
                OnCompleteTypeNameChanged();
            }
        }
        private global::System.String _CompleteTypeName;
        partial void OnCompleteTypeNameChanging(global::System.String value);
        partial void OnCompleteTypeNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_CompleteTypeIdent", "Game")]
        public EntityCollection<Game> Games
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Game>("ChessSharpModel.FK_Game_CompleteTypeIdent", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Game>("ChessSharpModel.FK_Game_CompleteTypeIdent", "Game", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ChessSharpModel", Name="Game")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Game : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Game object.
        /// </summary>
        /// <param name="ident">Initial value of the Ident property.</param>
        public static Game CreateGame(global::System.Int32 ident)
        {
            Game game = new Game();
            game.Ident = ident;
            return game;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Ident
        {
            get
            {
                return _Ident;
            }
            set
            {
                if (_Ident != value)
                {
                    OnIdentChanging(value);
                    ReportPropertyChanging("Ident");
                    _Ident = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Ident");
                    OnIdentChanged();
                }
            }
        }
        private global::System.Int32 _Ident;
        partial void OnIdentChanging(global::System.Int32 value);
        partial void OnIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GameName
        {
            get
            {
                return _GameName;
            }
            set
            {
                OnGameNameChanging(value);
                ReportPropertyChanging("GameName");
                _GameName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GameName");
                OnGameNameChanged();
            }
        }
        private global::System.String _GameName;
        partial void OnGameNameChanging(global::System.String value);
        partial void OnGameNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Light_PlayerIdent
        {
            get
            {
                return _Light_PlayerIdent;
            }
            set
            {
                OnLight_PlayerIdentChanging(value);
                ReportPropertyChanging("Light_PlayerIdent");
                _Light_PlayerIdent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Light_PlayerIdent");
                OnLight_PlayerIdentChanged();
            }
        }
        private Nullable<global::System.Int32> _Light_PlayerIdent;
        partial void OnLight_PlayerIdentChanging(Nullable<global::System.Int32> value);
        partial void OnLight_PlayerIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Dark_PlayerIdent
        {
            get
            {
                return _Dark_PlayerIdent;
            }
            set
            {
                OnDark_PlayerIdentChanging(value);
                ReportPropertyChanging("Dark_PlayerIdent");
                _Dark_PlayerIdent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Dark_PlayerIdent");
                OnDark_PlayerIdentChanged();
            }
        }
        private Nullable<global::System.Int32> _Dark_PlayerIdent;
        partial void OnDark_PlayerIdentChanging(Nullable<global::System.Int32> value);
        partial void OnDark_PlayerIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Add_PlayerIdent
        {
            get
            {
                return _Add_PlayerIdent;
            }
            set
            {
                OnAdd_PlayerIdentChanging(value);
                ReportPropertyChanging("Add_PlayerIdent");
                _Add_PlayerIdent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Add_PlayerIdent");
                OnAdd_PlayerIdentChanged();
            }
        }
        private Nullable<global::System.Int32> _Add_PlayerIdent;
        partial void OnAdd_PlayerIdentChanging(Nullable<global::System.Int32> value);
        partial void OnAdd_PlayerIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Add_Date
        {
            get
            {
                return _Add_Date;
            }
            set
            {
                OnAdd_DateChanging(value);
                ReportPropertyChanging("Add_Date");
                _Add_Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Add_Date");
                OnAdd_DateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Add_Date;
        partial void OnAdd_DateChanging(Nullable<global::System.DateTime> value);
        partial void OnAdd_DateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Start_Date
        {
            get
            {
                return _Start_Date;
            }
            set
            {
                OnStart_DateChanging(value);
                ReportPropertyChanging("Start_Date");
                _Start_Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Start_Date");
                OnStart_DateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Start_Date;
        partial void OnStart_DateChanging(Nullable<global::System.DateTime> value);
        partial void OnStart_DateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Complete_Date
        {
            get
            {
                return _Complete_Date;
            }
            set
            {
                OnComplete_DateChanging(value);
                ReportPropertyChanging("Complete_Date");
                _Complete_Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Complete_Date");
                OnComplete_DateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Complete_Date;
        partial void OnComplete_DateChanging(Nullable<global::System.DateTime> value);
        partial void OnComplete_DateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CompleteTypeIdent
        {
            get
            {
                return _CompleteTypeIdent;
            }
            set
            {
                OnCompleteTypeIdentChanging(value);
                ReportPropertyChanging("CompleteTypeIdent");
                _CompleteTypeIdent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompleteTypeIdent");
                OnCompleteTypeIdentChanged();
            }
        }
        private Nullable<global::System.Int32> _CompleteTypeIdent;
        partial void OnCompleteTypeIdentChanging(Nullable<global::System.Int32> value);
        partial void OnCompleteTypeIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MoveHistory
        {
            get
            {
                return _MoveHistory;
            }
            set
            {
                OnMoveHistoryChanging(value);
                ReportPropertyChanging("MoveHistory");
                _MoveHistory = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MoveHistory");
                OnMoveHistoryChanged();
            }
        }
        private global::System.String _MoveHistory;
        partial void OnMoveHistoryChanging(global::System.String value);
        partial void OnMoveHistoryChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_CompleteTypeIdent", "CompleteType")]
        public CompleteType CompleteType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompleteType>("ChessSharpModel.FK_Game_CompleteTypeIdent", "CompleteType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompleteType>("ChessSharpModel.FK_Game_CompleteTypeIdent", "CompleteType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CompleteType> CompleteTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CompleteType>("ChessSharpModel.FK_Game_CompleteTypeIdent", "CompleteType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CompleteType>("ChessSharpModel.FK_Game_CompleteTypeIdent", "CompleteType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_Add_PlayerIdent", "Player")]
        public Player Player
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Add_PlayerIdent", "Player").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Add_PlayerIdent", "Player").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Player> PlayerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Add_PlayerIdent", "Player");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Player>("ChessSharpModel.FK_Game_Add_PlayerIdent", "Player", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_Dark_PlayerIdent", "Player")]
        public Player Player1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Dark_PlayerIdent", "Player").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Dark_PlayerIdent", "Player").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Player> Player1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Dark_PlayerIdent", "Player");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Player>("ChessSharpModel.FK_Game_Dark_PlayerIdent", "Player", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_Ident", "GameSquare")]
        public EntityCollection<GamePiece> GameSquares
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GamePiece>("ChessSharpModel.FK_Game_Ident", "GameSquare");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GamePiece>("ChessSharpModel.FK_Game_Ident", "GameSquare", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_Light_PlayerIdent", "Player")]
        public Player Player2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Light_PlayerIdent", "Player").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Light_PlayerIdent", "Player").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Player> Player2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Game_Light_PlayerIdent", "Player");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Player>("ChessSharpModel.FK_Game_Light_PlayerIdent", "Player", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ChessSharpModel", Name="GamePiece")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GamePiece : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GamePiece object.
        /// </summary>
        /// <param name="ident">Initial value of the Ident property.</param>
        /// <param name="alive">Initial value of the Alive property.</param>
        /// <param name="moveCount">Initial value of the MoveCount property.</param>
        public static GamePiece CreateGamePiece(global::System.Int32 ident, global::System.Boolean alive, global::System.Int32 moveCount)
        {
            GamePiece gamePiece = new GamePiece();
            gamePiece.Ident = ident;
            gamePiece.Alive = alive;
            gamePiece.MoveCount = moveCount;
            return gamePiece;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Ident
        {
            get
            {
                return _Ident;
            }
            set
            {
                if (_Ident != value)
                {
                    OnIdentChanging(value);
                    ReportPropertyChanging("Ident");
                    _Ident = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Ident");
                    OnIdentChanged();
                }
            }
        }
        private global::System.Int32 _Ident;
        partial void OnIdentChanging(global::System.Int32 value);
        partial void OnIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> GameIdent
        {
            get
            {
                return _GameIdent;
            }
            set
            {
                OnGameIdentChanging(value);
                ReportPropertyChanging("GameIdent");
                _GameIdent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GameIdent");
                OnGameIdentChanged();
            }
        }
        private Nullable<global::System.Int32> _GameIdent;
        partial void OnGameIdentChanging(Nullable<global::System.Int32> value);
        partial void OnGameIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SquareIndex
        {
            get
            {
                return _SquareIndex;
            }
            set
            {
                OnSquareIndexChanging(value);
                ReportPropertyChanging("SquareIndex");
                _SquareIndex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SquareIndex");
                OnSquareIndexChanged();
            }
        }
        private Nullable<global::System.Int32> _SquareIndex;
        partial void OnSquareIndexChanging(Nullable<global::System.Int32> value);
        partial void OnSquareIndexChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PieceType
        {
            get
            {
                return _PieceType;
            }
            set
            {
                OnPieceTypeChanging(value);
                ReportPropertyChanging("PieceType");
                _PieceType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PieceType");
                OnPieceTypeChanged();
            }
        }
        private Nullable<global::System.Int32> _PieceType;
        partial void OnPieceTypeChanging(Nullable<global::System.Int32> value);
        partial void OnPieceTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Alive
        {
            get
            {
                return _Alive;
            }
            set
            {
                OnAliveChanging(value);
                ReportPropertyChanging("Alive");
                _Alive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Alive");
                OnAliveChanged();
            }
        }
        private global::System.Boolean _Alive;
        partial void OnAliveChanging(global::System.Boolean value);
        partial void OnAliveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MoveCount
        {
            get
            {
                return _MoveCount;
            }
            set
            {
                OnMoveCountChanging(value);
                ReportPropertyChanging("MoveCount");
                _MoveCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MoveCount");
                OnMoveCountChanged();
            }
        }
        private global::System.Int32 _MoveCount;
        partial void OnMoveCountChanging(global::System.Int32 value);
        partial void OnMoveCountChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_Ident", "Game")]
        public Game Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("ChessSharpModel.FK_Game_Ident", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("ChessSharpModel.FK_Game_Ident", "Game").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> GameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("ChessSharpModel.FK_Game_Ident", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("ChessSharpModel.FK_Game_Ident", "Game", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ChessSharpModel", Name="Player")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Player : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Player object.
        /// </summary>
        /// <param name="ident">Initial value of the Ident property.</param>
        public static Player CreatePlayer(global::System.Int32 ident)
        {
            Player player = new Player();
            player.Ident = ident;
            return player;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Ident
        {
            get
            {
                return _Ident;
            }
            set
            {
                if (_Ident != value)
                {
                    OnIdentChanging(value);
                    ReportPropertyChanging("Ident");
                    _Ident = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Ident");
                    OnIdentChanged();
                }
            }
        }
        private global::System.Int32 _Ident;
        partial void OnIdentChanging(global::System.Int32 value);
        partial void OnIdentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlayerName
        {
            get
            {
                return _PlayerName;
            }
            set
            {
                OnPlayerNameChanging(value);
                ReportPropertyChanging("PlayerName");
                _PlayerName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlayerName");
                OnPlayerNameChanged();
            }
        }
        private global::System.String _PlayerName;
        partial void OnPlayerNameChanging(global::System.String value);
        partial void OnPlayerNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Rating
        {
            get
            {
                return _Rating;
            }
            set
            {
                OnRatingChanging(value);
                ReportPropertyChanging("Rating");
                _Rating = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rating");
                OnRatingChanged();
            }
        }
        private Nullable<global::System.Int32> _Rating;
        partial void OnRatingChanging(Nullable<global::System.Int32> value);
        partial void OnRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WinCount
        {
            get
            {
                return _WinCount;
            }
            set
            {
                OnWinCountChanging(value);
                ReportPropertyChanging("WinCount");
                _WinCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WinCount");
                OnWinCountChanged();
            }
        }
        private Nullable<global::System.Int32> _WinCount;
        partial void OnWinCountChanging(Nullable<global::System.Int32> value);
        partial void OnWinCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LossCount
        {
            get
            {
                return _LossCount;
            }
            set
            {
                OnLossCountChanging(value);
                ReportPropertyChanging("LossCount");
                _LossCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LossCount");
                OnLossCountChanged();
            }
        }
        private Nullable<global::System.Int32> _LossCount;
        partial void OnLossCountChanging(Nullable<global::System.Int32> value);
        partial void OnLossCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DrawCount
        {
            get
            {
                return _DrawCount;
            }
            set
            {
                OnDrawCountChanging(value);
                ReportPropertyChanging("DrawCount");
                _DrawCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DrawCount");
                OnDrawCountChanged();
            }
        }
        private Nullable<global::System.Int32> _DrawCount;
        partial void OnDrawCountChanging(Nullable<global::System.Int32> value);
        partial void OnDrawCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ForfeitCount
        {
            get
            {
                return _ForfeitCount;
            }
            set
            {
                OnForfeitCountChanging(value);
                ReportPropertyChanging("ForfeitCount");
                _ForfeitCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ForfeitCount");
                OnForfeitCountChanged();
            }
        }
        private Nullable<global::System.Int32> _ForfeitCount;
        partial void OnForfeitCountChanging(Nullable<global::System.Int32> value);
        partial void OnForfeitCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> JoinDate
        {
            get
            {
                return _JoinDate;
            }
            set
            {
                OnJoinDateChanging(value);
                ReportPropertyChanging("JoinDate");
                _JoinDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("JoinDate");
                OnJoinDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _JoinDate;
        partial void OnJoinDateChanging(Nullable<global::System.DateTime> value);
        partial void OnJoinDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LastSeenDate
        {
            get
            {
                return _LastSeenDate;
            }
            set
            {
                OnLastSeenDateChanging(value);
                ReportPropertyChanging("LastSeenDate");
                _LastSeenDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastSeenDate");
                OnLastSeenDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _LastSeenDate;
        partial void OnLastSeenDateChanging(Nullable<global::System.DateTime> value);
        partial void OnLastSeenDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_Add_PlayerIdent", "Game")]
        public EntityCollection<Game> Games
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Game>("ChessSharpModel.FK_Game_Add_PlayerIdent", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Game>("ChessSharpModel.FK_Game_Add_PlayerIdent", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_Dark_PlayerIdent", "Game")]
        public EntityCollection<Game> Games1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Game>("ChessSharpModel.FK_Game_Dark_PlayerIdent", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Game>("ChessSharpModel.FK_Game_Dark_PlayerIdent", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Game_Light_PlayerIdent", "Game")]
        public EntityCollection<Game> Games2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Game>("ChessSharpModel.FK_Game_Light_PlayerIdent", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Game>("ChessSharpModel.FK_Game_Light_PlayerIdent", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Player_Player", "Player1")]
        public Player Player1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Player_Player", "Player1").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Player_Player", "Player1").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Player> Player1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Player_Player", "Player1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Player>("ChessSharpModel.FK_Player_Player", "Player1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ChessSharpModel", "FK_Player_Player", "Player")]
        public Player Player2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Player_Player", "Player").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Player_Player", "Player").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Player> Player2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Player>("ChessSharpModel.FK_Player_Player", "Player");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Player>("ChessSharpModel.FK_Player_Player", "Player", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
